// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: query.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getWorkerPools = `-- name: GetWorkerPools :many
SELECT id, queue, workers, created_at, updated_at
FROM public.gue_jobs_worker_pool
WHERE updated_at > NOW() - INTERVAL '2 minutes'
ORDER BY queue, id
`

func (q *Queries) GetWorkerPools(ctx context.Context) ([]GueJobsWorkerPool, error) {
	rows, err := q.db.Query(ctx, getWorkerPools)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GueJobsWorkerPool
	for rows.Next() {
		var i GueJobsWorkerPool
		if err := rows.Scan(
			&i.ID,
			&i.Queue,
			&i.Workers,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertHistory = `-- name: InsertHistory :exec
INSERT INTO public.gue_jobs_history (job_id, priority, run_at, job_type, args, run_count, run_error, queue, created_at,
                                     updated_at, success, finished_at)
VALUES ($1, $2, $3, $4, $5, $6, $8::text, $7, STATEMENT_TIMESTAMP(), STATEMENT_TIMESTAMP(), FALSE, NULL)
`

type InsertHistoryParams struct {
	JobID    string
	Priority int16
	RunAt    pgtype.Timestamptz
	JobType  string
	Args     []byte
	RunCount int32
	Queue    string
	RunError string
}

func (q *Queries) InsertHistory(ctx context.Context, arg InsertHistoryParams) error {
	_, err := q.db.Exec(ctx, insertHistory,
		arg.JobID,
		arg.Priority,
		arg.RunAt,
		arg.JobType,
		arg.Args,
		arg.RunCount,
		arg.Queue,
		arg.RunError,
	)
	return err
}

const updateHistory = `-- name: UpdateHistory :exec
UPDATE public.gue_jobs_history
SET run_error   = $5::text,
    finished_at = STATEMENT_TIMESTAMP(), -- now() or CURRENT_TIMESTAMP record the start of the transaction, this is more precise in case of a long running job.
    run_count   = $1,
    success     = $2
WHERE job_id = $3
  AND run_count = $4
  AND finished_at IS NULL
`

type UpdateHistoryParams struct {
	RunCount   int32
	Success    bool
	JobID      string
	RunCount_2 int32
	RunError   string
}

func (q *Queries) UpdateHistory(ctx context.Context, arg UpdateHistoryParams) error {
	_, err := q.db.Exec(ctx, updateHistory,
		arg.RunCount,
		arg.Success,
		arg.JobID,
		arg.RunCount_2,
		arg.RunError,
	)
	return err
}

const upsertWorkerToPool = `-- name: UpsertWorkerToPool :exec
INSERT INTO public.gue_jobs_worker_pool (id, queue, workers, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), $4)
ON CONFLICT (id, queue) DO UPDATE SET updated_at = NOW(),
                                      workers    = $3
`

type UpsertWorkerToPoolParams struct {
	ID        string
	Queue     string
	Workers   int16
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) UpsertWorkerToPool(ctx context.Context, arg UpsertWorkerToPoolParams) error {
	_, err := q.db.Exec(ctx, upsertWorkerToPool,
		arg.ID,
		arg.Queue,
		arg.Workers,
		arg.UpdatedAt,
	)
	return err
}
