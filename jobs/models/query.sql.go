// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package models

import (
	"context"
)

const getPendingJobs = `-- name: GetPendingJobs :many
SELECT job_id, priority, run_at, job_type, args, error_count, last_error, queue, created_at, updated_at FROM public.gue_jobs WHERE queue = $1 ORDER BY priority, run_at ASC LIMIT 100
`

func (q *Queries) GetPendingJobs(ctx context.Context, queue string) ([]GueJob, error) {
	rows, err := q.db.Query(ctx, getPendingJobs, queue)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GueJob
	for rows.Next() {
		var i GueJob
		if err := rows.Scan(
			&i.JobID,
			&i.Priority,
			&i.RunAt,
			&i.JobType,
			&i.Args,
			&i.ErrorCount,
			&i.LastError,
			&i.Queue,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQueues = `-- name: GetQueues :many
SELECT queue FROM public.gue_jobs
UNION
SELECT queue FROM public.gue_jobs_history
`

func (q *Queries) GetQueues(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getQueues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var queue string
		if err := rows.Scan(&queue); err != nil {
			return nil, err
		}
		items = append(items, queue)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const statsAvgDurationOfJobs = `-- name: StatsAvgDurationOfJobs :one
SELECT AVG(EXTRACT(MICROSECONDS FROM (finished_at - created_at))) AS durration_in_microseconds FROM public.gue_jobs_history WHERE queue = $1
`

func (q *Queries) StatsAvgDurationOfJobs(ctx context.Context, queue string) (float64, error) {
	row := q.db.QueryRow(ctx, statsAvgDurationOfJobs, queue)
	var durration_in_microseconds float64
	err := row.Scan(&durration_in_microseconds)
	return durration_in_microseconds, err
}

const statsFailedJobs = `-- name: StatsFailedJobs :one
SELECT COUNT(*) FROM public.gue_jobs WHERE queue = $1 AND error_count <> 0
`

func (q *Queries) StatsFailedJobs(ctx context.Context, queue string) (int64, error) {
	row := q.db.QueryRow(ctx, statsFailedJobs, queue)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const statsPendingJobs = `-- name: StatsPendingJobs :one
SELECT COUNT(*) FROM public.gue_jobs WHERE queue = $1
`

func (q *Queries) StatsPendingJobs(ctx context.Context, queue string) (int64, error) {
	row := q.db.QueryRow(ctx, statsPendingJobs, queue)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const statsPendingJobsPerType = `-- name: StatsPendingJobsPerType :many
SELECT job_type, COUNT(*) as count FROM public.gue_jobs WHERE queue = $1 GROUP BY job_type
`

type StatsPendingJobsPerTypeRow struct {
	JobType string
	Count   int64
}

func (q *Queries) StatsPendingJobsPerType(ctx context.Context, queue string) ([]StatsPendingJobsPerTypeRow, error) {
	rows, err := q.db.Query(ctx, statsPendingJobsPerType, queue)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StatsPendingJobsPerTypeRow
	for rows.Next() {
		var i StatsPendingJobsPerTypeRow
		if err := rows.Scan(&i.JobType, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const statsProcessedJobs = `-- name: StatsProcessedJobs :one
SELECT COUNT(*) FROM public.gue_jobs_history WHERE queue = $1
`

func (q *Queries) StatsProcessedJobs(ctx context.Context, queue string) (int64, error) {
	row := q.db.QueryRow(ctx, statsProcessedJobs, queue)
	var count int64
	err := row.Scan(&count)
	return count, err
}
