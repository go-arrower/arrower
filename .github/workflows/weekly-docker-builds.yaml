on:
  schedule:
    # * is a special character in YAML, so you have to quote this string
    - cron:  '0 4 * * 1' # every monday morning
  workflow_dispatch:

name: Weekly Docker Builds

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-postgres:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Setting up Docker Buildx with docker-container driver is required
      # at the moment to be able to use a subdirectory with Git context
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build Postgres
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:docker/postgres"
          push: true
          tags: ghcr.io/arrower/postgres:latest
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.PAT }}
