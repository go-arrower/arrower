run:
  build-tags:
    - integration

linters-settings:
  exhaustive:
    # Presence of "default" case in switch statements satisfies exhaustiveness,
    # even if all enum members are not listed.
    # Default: false
    default-signifies-exhaustive: true
  gci:
    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().
    # The default order of sections is `standard > default > custom > blank > dot`,
    # If `custom-order` is `true`, it follows the order of `sections` option.
    # Default: ["standard", "default"]
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - prefix(github.com/go-arrower/arrower) # Custom section: groups all imports with the specified Prefix.
      - blank # Blank section: contains all blank imports. This section is not present unless explicitly enabled.
      - dot # Dot section: contains all dot imports. This section is not present unless explicitly enabled.
  gocognit:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 20
  gocyclo:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 10
  goimports:
    # A comma-separated list of prefixes, which, if set, checks import paths
    # with the given prefixes are grouped after 3rd-party packages.
    # Default: ""
    local-prefixes: github.com/go-arrower/arrower
  gomnd:
    # List of file patterns to exclude from analysis.
    # Values always ignored: `.+_test.go`
    # Default: []
    ignored-files:
      - testing.go # ignore public test suites like for setting.Settings interface
  govet:
    # Report about shadowed variables.
    # Default: false
    check-shadowing: true
    # Enable analyzers by name (in addition to default).
    # Run `go tool vet help` to see all analyzers.
    # Default: []
    enable:
      - asmdecl
      - assign
      - atomic
      - atomicalign
      - bools
      - buildtag
      - cgocall
      - composites
      - copylocks
      - deepequalerrors
      - errorsas
      - fieldalignment
      - findcall
      - framepointer
      - httpresponse
      - ifaceassert
      - loopclosure
      - lostcancel
      - nilfunc
      - nilness
      - printf
      - reflectvaluecompare
      - shadow
      - shift
      - sigchanyzer
      - sortslice
      - stdmethods
      - stringintconv
      - structtag
      - testinggoroutine
      - tests
      - unmarshal
      - unreachable
      - unsafeptr
      - unusedresult
      - unusedwrite
  maligned:
    # Print struct with more effective memory layout or not.
    # Default: false
    suggest-new: true
  misspell:
    locale: UK
  testifylint:
    # Enable specific checkers.
    # https://github.com/Antonboom/testifylint#checkers
    # Default: ["bool-compare", "compares", "empty", "error-is-as", "error-nil", "expected-actual", "float-compare", "len", "require-error", "suite-dont-use-pkg", "suite-extra-assert-call"]
    enable:
      - bool-compare
      - compares
      - empty
      - error-is-as
      - error-nil
      - expected-actual
      - float-compare
      - len
      # - require-error # don't understand the difference between assert and require (recommended by the linter) package of testify, so I stick with the pattern I know
      - suite-dont-use-pkg
      - suite-extra-assert-call
      - suite-thelper
  varnamelen:
    # The longest distance, in source lines, that is being considered a "small scope".
    # Variables used in at most this many lines will be ignored.
    # Default: 5
    max-distance: 6
    # The minimum length of a variable's name that is considered "long".
    # Variable names that are at least this long will be ignored.
    # Default: 3
    min-name-length: 2
    # Optional list of variable declarations that should be ignored completely.
    # Entries must be in one of the following forms (see below for examples):
    # - for variables, parameters, named return values, method receivers, or type parameters:
    #   <name> <type>  (<type> can also be a pointer/slice/map/chan/...)
    # - for constants: const <name>
    #
    # Default: []
    ignore-decls:
      - c echo.Context
      - w io.Writer

linters:
  # Disable all linters.
  # Default: false
  disable-all: true
  # Explicitly enable a linter, to prevent new versions of golangci-lint to suddenly fail the build.
  # To keep the maintenance of this list simple, it lists all linters in the same order as: https://golangci-lint.run/usage/linters/
  # Disabled linters are commented out instead of removed, to aid that comparison.
  # Last comparison with: 1.50.1
  enable:
    - errcheck
    - gosimple
    - govet
    - ineffassign
    - staticcheck
    - typecheck
    - unused

    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - containedctx
    - contextcheck
    - cyclop
    #- deadcode # deprecated
    - decorder
    #- depguard # linter provides no value to current state of the project
    - dogsled
    - dupl
    - dupword
    - durationcheck
    - errchkjson
    - errname
    - errorlint
    - execinquery
    - exhaustive
    #- exhaustivestruct # deprecated
    - exhaustruct
    - exportloopref
    - forbidigo
    - forcetypeassert
    - funlen
    - gci
    - ginkgolinter
    - gochecknoglobals
    - gochecknoinits
    - gochecksumtype
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godot
    - godox
    - goerr113
    - gofmt
    - gofumpt
    - goheader
    - goimports
    #- golint # deprecated
    - gomnd
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    - gosec
    - gosmopolitan
    - grouper
    #- ifshort # deprecated
    - importas
    - interfacebloat
    #- interfacer # deprecated
    - ireturn
    - lll
    - loggercheck
    - maintidx
    - makezero
    #- maligned # deprecated
    - mirror
    - misspell
    - musttag
    - nakedret
    - nestif
    - nilerr
    - nilnil
    - nlreturn
    - noctx
    - nolintlint
    - nonamedreturns
    #- nosnakecase # deprecated
    - nosprintfhostport
    - paralleltest
    - perfsprint
    - prealloc
    - predeclared
    - promlinter
    - protogetter
    - reassign
    - revive
    - rowserrcheck
    #- scopelint # deprecated
    - sloglint
    - sqlclosecheck
    #- structcheck # deprecated
    - stylecheck
    - tagalign
    - tagliatelle
    - tenv
    - testableexamples
    - testifylint
    - testpackage
    - thelper
    - tparallel
    - unconvert
    - unparam
    - usestdlibvars
    #- varcheck # deprecated
    - varnamelen
    - wastedassign
    - whitespace
    - wrapcheck
    - wsl
    - zerologlint

issues:
  exclude-rules:
    #
    # Exclude lll issues for long lines with go:generate
    #
    - linters:
        - lll
      source: "^//go:generate "

    #
    # Exclude issues from test files
    #
    - path: _test.go|testing.go
      linters:
        - gochecknoglobals # Allow globals so testdata & integration helpers can be made available in a convenient way
        - funlen  # Allow test functions of any length
        - exhaustruct # Don't force complete struct initialisation to keep test cases simpler to read
        - lll # Mostly because of lengthy msgAndArgs params in assertions
        - forcetypeassert # Don't need to check in tests, simplifies e.g. the assertion of the jobs.queues.GetFirst() method
        - errcheck # Makes the 'setup' step of test cases much easier to read, e.g. repo initialisation and following Save() operation are on the same column width
    - path: _test.go|testing.go # partly exclude false positives, but not all. Can not mix with complete exclusion above or "text" filter applies to all linters and e.g. doesn't catch funlen anymore
      linters:
        - govet
      text: "fieldalignment" # Prefer easier readability to optimal memory layout for tests

    # Allow patterns that are considered best practises for Corba CLI applications
    - path: arrower/cmd
      linters:
        - exhaustruct # Allow the command to not use all configurations options & hooks Cobra offers